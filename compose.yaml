name: diamonds-project
services:
  clients-bot:
    container_name: clients-bot
    build:
      context:
        ./ClientsBot
      args:
        db_host: ${db_host}
        db_port: ${db_port}
        db_user: ${db_user}
        db_password: ${db_password}
        db_name: ${db_name}
        bot_token: ${clients_bot_token}
        openai_api_key: ${openai_api_key}
        json_extractor_assistant_id: ${json_extractor_assistant_id}
        sellers_bot_backend_url: "http://sellers-bot:8001"
        payment_provider_terminal: ${payment_provider_terminal}
        payment_provider_api_name: ${payment_provider_api_name}
        log_level: ${log_level}
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_healthy
    ports:
      - 8003:8001
    expose:
      - 8003
    develop:
      watch:
        - action: sync+restart
          path: ./ClientsBot/src
          target: /app/src
        - action: rebuild
          path: ./ClientsBot/locale
          target: /app/locale
        - action: rebuild
          path: ./compose.yaml
        - action: rebuild
          path: ./ClientsBot/Dockerfile
        - action: rebuild
          path: ./ClientsBot/requirements.txt
    volumes:
      - ./ClientsBot/logs:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:8001/api/v1/alive || exit 1" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 2s
      start_period: 10s
  sellers-bot:
    container_name: sellers-bot
    build:
      context:
        ./SellersBot
      args:
        db_host: ${db_host}
        db_port: ${db_port}
        db_user: ${db_user}
        db_password: ${db_password}
        db_name: ${db_name}
        bot_token: ${sellers_bot_token}
        openai_api_key: ${openai_api_key}
        json_extractor_assistant_id: ${json_extractor_assistant_id}
        b2b_group_id: ${b2b_group_id}
        bot_backend_host: 0.0.0.0
        bot_backend_port: 8001
        backend_url: ${backend_url}
        payment_provider_api_name: ${payment_provider_api_name}
        payment_provider_terminal: ${payment_provider_terminal}
        log_level: ${log_level}
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_healthy
    ports:
      - 8001:8001
    expose:
      - 8001
    develop:
      watch:
        - action: sync+restart
          path: ./SellersBot/src
          target: /app/src
        - action: rebuild
          path: ./SellersBot/locale
          target: /app/locale
        - action: rebuild
          path: ./compose.yaml
        - action: rebuild
          path: ./SellersBot/Dockerfile
        - action: rebuild
          path: ./SellersBot/requirements.txt
    volumes:
      - ./SellersBot/logs:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:8001/api/v1/alive || exit 1" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 2s
      start_period: 10s
  database:
    container_name: database
    image: postgres:16
    restart: always
    ports:
      - ${db_port}:${db_port}
    expose:
      - ${db_port}
    environment:
      POSTGRES_USER: ${db_user}
      POSTGRES_PASSWORD: ${db_password}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  backend:
    container_name: backend
    build:
      context:
        ./Backend
      args:
        db_host: ${db_host}
        db_port: ${db_port}
        db_user: ${db_user}
        db_password: ${db_password}
        db_name: ${db_name}
        backend_host: 0.0.0.0
        backend_port: 8002
        sellers_bot_host: sellers-bot
        sellers_bot_port: 8001
        clients_bot_host: clients-bot
        clients_bot_port: 8001
        environment: ${environment}
        backend_access_token: ${backend_access_token}
        log_level: ${log_level}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - 8002:8002
    expose:
      - 8002
    develop:
      watch:
        - action: sync+restart
          path: ./Backend/src
          target: /app/src
        - action: rebuild
          path: ./Backend/Dockerfile
        - action: rebuild
          path: ./compose.yaml
        - action: rebuild
          path: /Backend/requirements.txt
    volumes:
      - ./Backend/logs:/app/logs
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:8002/api/v1/alive || exit 1" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 2s
      start_period: 10s
volumes:
  db_data: